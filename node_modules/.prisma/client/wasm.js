
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.21.1
 * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
 */
Prisma.prismaVersion = {
  client: "5.21.1",
  engine: "bf0e5e8a04cada8225617067eaa03d041e2bba36"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  current_password: 'current_password',
  birthdate: 'birthdate',
  phone_number: 'phone_number',
  role: 'role',
  state: 'state',
  photo: 'photo',
  cityId: 'cityId',
  created_at: 'created_at'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  state_id: 'state_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  county_fips: 'county_fips',
  stateId: 'stateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  city_ascii: 'city_ascii',
  stateId: 'stateId',
  countyId: 'countyId',
  lat: 'lat',
  lng: 'lng',
  population: 'population',
  timezone: 'timezone',
  ranking: 'ranking',
  zip: 'zip',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  uniqueCityIdentifier: 'uniqueCityIdentifier'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  address: 'address',
  cityId: 'cityId',
  latitude: 'latitude',
  longitude: 'longitude',
  zip: 'zip',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  stateId: 'stateId',
  countyId: 'countyId'
};

exports.Prisma.BreweryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  website: 'website',
  ownerId: 'ownerId',
  managerId: 'managerId',
  comments: 'comments',
  merchandise: 'merchandise',
  social_media: 'social_media',
  status: 'status',
  locationId: 'locationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BeerScalarFieldEnum = {
  id: 'id',
  type: 'type',
  brand: 'brand',
  name: 'name',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BreweryBeerScalarFieldEnum = {
  id: 'id',
  breweryId: 'breweryId',
  beerId: 'beerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FoodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BreweryFoodScalarFieldEnum = {
  id: 'id',
  breweryId: 'breweryId',
  foodId: 'foodId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BreweryServiceScalarFieldEnum = {
  id: 'id',
  breweryId: 'breweryId',
  serviceId: 'serviceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MusicScalarFieldEnum = {
  id: 'id',
  genre: 'genre',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BreweryMusicScalarFieldEnum = {
  id: 'id',
  breweryId: 'breweryId',
  musicId: 'musicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  date: 'date',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BreweryEventScalarFieldEnum = {
  id: 'id',
  breweryId: 'breweryId',
  eventId: 'eventId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BreweryFeatureScalarFieldEnum = {
  id: 'id',
  logo: 'logo',
  image: 'image',
  description: 'description',
  phone: 'phone',
  facebook: 'facebook',
  x: 'x',
  instagram: 'instagram',
  highlighted: 'highlighted',
  capacity: 'capacity',
  booklink: 'booklink',
  pricerank: 'pricerank',
  state: 'state',
  breweryId: 'breweryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OperatingHoursScalarFieldEnum = {
  id: 'id',
  mondayOpen: 'mondayOpen',
  mondayClose: 'mondayClose',
  tuesdayOpen: 'tuesdayOpen',
  tuesdayClose: 'tuesdayClose',
  wednesdayOpen: 'wednesdayOpen',
  wednesdayClose: 'wednesdayClose',
  thursdayOpen: 'thursdayOpen',
  thursdayClose: 'thursdayClose',
  fridayOpen: 'fridayOpen',
  fridayClose: 'fridayClose',
  saturdayOpen: 'saturdayOpen',
  saturdayClose: 'saturdayClose',
  sundayOpen: 'sundayOpen',
  sundayClose: 'sundayClose',
  breweryId: 'breweryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TutorialStepsAppScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  web_image: 'web_image',
  mobile_image: 'mobile_image',
  orden: 'orden',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  userId: 'userId',
  cityId: 'cityId',
  radius: 'radius',
  startDate: 'startDate',
  breweryCount: 'breweryCount',
  days: 'days',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourBreweryScalarFieldEnum = {
  id: 'id',
  tourId: 'tourId',
  breweryId: 'breweryId',
  distance: 'distance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  senderId: 'senderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipientScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  userId: 'userId',
  read: 'read',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  limit: 'limit',
  desktop_width: 'desktop_width',
  desktop_height: 'desktop_height',
  mobile_width: 'mobile_width',
  mobile_height: 'mobile_height',
  desktop_file_size: 'desktop_file_size',
  mobile_file_size: 'mobile_file_size',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdRatesScalarFieldEnum = {
  id: 'id',
  stateId: 'stateId',
  cityId: 'cityId',
  adTypeId: 'adTypeId',
  rate: 'rate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdScalarFieldEnum = {
  id: 'id',
  name: 'name',
  adTypesId: 'adTypesId',
  linkUrl: 'linkUrl',
  buttonName: 'buttonName',
  desktopFile: 'desktopFile',
  mobileFile: 'mobileFile',
  font: 'font',
  text1: 'text1',
  text1Color: 'text1Color',
  text2: 'text2',
  text2Color: 'text2Color',
  bgImage: 'bgImage',
  payStatus: 'payStatus',
  status: 'status',
  totalCost: 'totalCost',
  userId: 'userId',
  categoryId: 'categoryId',
  urlVideo: 'urlVideo',
  desktopVideoFile: 'desktopVideoFile',
  desktopVideoPreview: 'desktopVideoPreview',
  mobileVideoFile: 'mobileVideoFile',
  mobileVideoPreview: 'mobileVideoPreview',
  stateId: 'stateId',
  cityId: 'cityId',
  selectedDays: 'selectedDays',
  selectedDates: 'selectedDates',
  startDate: 'startDate',
  endDate: 'endDate',
  clicks: 'clicks',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TermsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  type: 'type',
  url: 'url',
  thumbnail: 'thumbnail',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  breweryId: 'breweryId',
  approvedById: 'approvedById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  BREWERY_MANAGER: 'BREWERY_MANAGER',
  BREWERY_OWNER: 'BREWERY_OWNER'
};

exports.Status = exports.$Enums.Status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.TypeText = exports.$Enums.TypeText = {
  TERMS_SERVICE: 'TERMS_SERVICE',
  PRIVACY_POLICY: 'PRIVACY_POLICY',
  ABOUT_US: 'ABOUT_US'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO'
};

exports.MediaStatus = exports.$Enums.MediaStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  State: 'State',
  County: 'County',
  City: 'City',
  Location: 'Location',
  Brewery: 'Brewery',
  Beer: 'Beer',
  BreweryBeer: 'BreweryBeer',
  Food: 'Food',
  BreweryFood: 'BreweryFood',
  Service: 'Service',
  BreweryService: 'BreweryService',
  Music: 'Music',
  BreweryMusic: 'BreweryMusic',
  Event: 'Event',
  BreweryEvent: 'BreweryEvent',
  BreweryFeature: 'BreweryFeature',
  OperatingHours: 'OperatingHours',
  TutorialStepsApp: 'TutorialStepsApp',
  Tags: 'Tags',
  Tour: 'Tour',
  TourBrewery: 'TourBrewery',
  Notification: 'Notification',
  Recipient: 'Recipient',
  AdType: 'AdType',
  AdRates: 'AdRates',
  Category: 'Category',
  Ad: 'Ad',
  Terms: 'Terms',
  Feature: 'Feature',
  Media: 'Media'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
